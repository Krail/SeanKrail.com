{"id":"vhdl-pipelined-calc-github","updated":"2016-05-27T04:24:25Z","url":"https://github.com/Krail/vhdl-pipelined-calculator","keywords":["VHDL","GHDL","GTKWave","Processor Design","GitHub"],"progress":90,"software":true,"hardware":true,"header":{"heading":"vhdl pipelined-calculator","image":{"title":"vhdl pipelined-calculator's logo","src":"https://raw.githubusercontent.com/Krail/vhdl-pipelined-calculator/master/.meta/project.png","alt":"vhdl pipelined-calculator"},"paragraph":"My multi-cycle pipelined 8-bit calculator that I designed in VHDL for CPEG324: Computer Systems Design. I used GHDL and GTKWave to simulate my designs."},"content":[{"type":"readme","html":"<h2 id=\"lab2vhdl8bitcalculator\">Lab 2: VHDL 8-bit Calculator</h2>\n\n<h3 id=\"cpeg324\">CPEG 324</h3>\n\n<h4 id=\"seankrail\">Sean Krail</h4>\n\n<p>The design of this single-cycle calculator roughly follows the simple, single-cycle MIPS processor shown in this image, including the naming of components:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/Krail/vhdl-single-cycle-calculator/master/.meta/project.png\" alt=\"Image of the simple, single-cycle MIPS processor\" /></p>\n\n<h3 id=\"installghdl031maynotbenecessaryghdl029shouldbefinemaybe\">Install GHDL 0.31 (may not be necessary, GHDL 0.29 should be fine... maybe)</h3>\n\n<pre><code>sudo add-apt-repository ppa:pgavin/ghdl\nsudo apt update\nsudo apt install ghdl\n</code></pre>\n\n<h3 id=\"runtestbenches\">Run test benches</h3>\n\n<ol>\n<li><p>Enter make directory:\n    cd make</p></li>\n\n<li><p>Remove current test bench binaries (may not be necessary):\n    make clean</p></li>\n\n<li><p>Make test bench binaries\na. Make all test bench binaries\n    make\nb. Make a specific test bench binary\n    make add2\n    make alu\n    make and2\n    make calculator\n    make control_unit\n    make full_adder\n    make half_adder\n    make mux2\n    make or2\n    make register_file\n    make sign_extend\n    make xor2\n    make debug_aluregfile\n    make debug_pc</p></li>\n\n<li><p>Execute a test bench binary\n    ./add2_tb\n    ./alu_tb\n    ./and2_tb\n    ./calculator_tb\n    ./comparator2_tb\n    ./control_unit_tb\n    ./debug_aluregfile_tb\n    ./debug_pc_tb\n    ./full_adder_tb\n    ./half_adder_tb\n    ./mux2_tb\n    ./or2_tb\n    ./register_file_tb\n    ./sign_extend_tb\n    ./xor2_tb</p></li>\n</ol>\n\n<h3 id=\"maintestbench\">Main test bench</h3>\n\n<ol>\n<li><p>Enter make directory:\n    cd make</p></li>\n\n<li><p>Remove current test bench binaries (may not be necessary):\n    make clean</p></li>\n\n<li><p>Make calculator's test bench binary\nMake all or make calculator (they are equivalent)\n    make\n    make calculator</p></li>\n\n<li><p>Execute the test bench binary\n    ./calculator_tb</p></li>\n\n<li><p>Create a GHW Waveform for GTKWave\n    ./calculator_tb --wave=../gtkwave/pipelined.ghw</p></li>\n</ol>\n\n<h3 id=\"featuresdefinitelynotbugs\">Features (definitely not bugs)</h3>\n\n<ul>\n<li>We print every clock cycle.</li>\n\n<li>Overflow and underflow flags are set accordingly internally\ninside of the calculator, but our calculator never does anything about it.</li>\n\n<li>Register file does reads just after (not on!) the rising_edge of clock.</li>\n</ul>"}]}