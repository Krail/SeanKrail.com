{"id":"PhotoLite-Brite-X-github","updated":"2016-05-23T17:51:15Z","url":"https://github.com/josemonsalve2/PhotoLite-Brite-X","keywords":["GitHub"],"progress":38,"software":true,"hardware":false,"header":{"heading":"PhotoLite Brite-X","image":{"title":"PhotoLite Brite-X's GitHub avatar","src":"https://avatars.githubusercontent.com/u/1594240?v=3","alt":"PhotoLite Brite-X"},"paragraph":"Long Exposure Photography Gigantic Stick Light Brite"},"content":[{"type":"readme","html":"<h2 id=\"photolitebritex\">PhotoLite-Brite-X</h2>\n\n<p>(UNDER DEVELOPMENT) Long Exposure Photography Gigantic Stick Light Brite</p>\n\n<h3 id=\"ws2812b144ledstrip\">WS2812B 144 LED Strip</h3>\n\n<p>While creating the VHDL module for the Led strip, \nwe realized that the documentation was not clear enough to understand the \nprotocol used for lighting the leds. Even more, sometimes we were confused \nby the value that was displaying on the leds, even when we were not sending any data. </p>\n\n<p>We decided to create our own documentation based on what can be found out there.\nFirst, it is important to understand that this 144 Led strip is made out of \n144 WS2812B components (one for each pixel). In this documentation, a pixel is just one \nWS2812B component out of the 144.</p>\n\n<p>This document does not contain information regarding the Maximum Ratings or electrical \ncharacteristics. Please see the datasheet to get this information.</p>\n\n<p>The WS2812B is an <strong>Intelligent control LED integrated light source</strong> and corresponds to our pixel. \nIt has 3 different leds: Red, Blue and Green. Each led has 256 levels of brightness encoded in 8 bits.\nThis adds up to a total of 24 bits per pixel. Data is sent in serial transmission, one bit at a time, starting from\nthe MSB of the 8 bits representing the brightness of the <em>green</em> led.\nAfter transmitting the 8 bits for the <em>green</em> led, we send the <em>red</em> led's bits, followed by the <em>blue</em> led's bits starting \nalways from the MSB to the LSB. Once the 24 bits are received by the first pixel, further data is cascaded to the following pixel.\n<strong>In other words, the order is GRB, from MSB to LSB</strong>.</p>\n\n<p><strong>IMPORTANT:</strong> Once a led is light up, it will retain its value and will remain on until the value is overwrited after a reset.\nIn order to turn off a pixel it is necessary to write 0 to all the 24 bits.</p>\n\n<h4 id=\"pinsofthews2812b\">Pins of the WS2812B</h4>\n\n<p>There are 4 pins per WS2812B.</p>\n\n<ol>\n<li>VCC (+3.5 ~ +5.3 V)</li>\n\n<li>VDD/GND</li>\n\n<li>DATA_IN</li>\n\n<li>DATA_OUT</li>\n</ol>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/1594240/14506449/de5e4a86-018b-11e6-8260-2fc3ba46a2f0.png\" alt=\"alt tag\" /></p>\n\n<p><em>VCC</em> and <em>VDD/GND</em> are self-explanatory. <em>DATA_IN</em> receives the data corresponding to the input for the\n24 bits that assign brightness to each of the colors (GBR, 8 bits each). However, once\nthe value of the pixel is assigned, all new data arriving to DATA<em>IN is ignored and it is retransmitted through \nthe DATA_OUT pin, until a reset is performed. This is, the purpose of the DATA_OUT is to retransmit the bits to \nthe following pixel's DATA</em>IN (j+1) once the current pixel (j) is already assigned a value. </p>\n\n<h4 id=\"timingisreallyimportant\">Timing is really important</h4>\n\n<p>One of the major challenges when sending the data to the led strip is timing. \nWe will explain a single pixel first, then we will expand our explanation to multiple pixels. \nA bit must be sent every 1.25 +/- 0.6 microseconds. Within that 1.25 microseconds, the bit is either \n1 or 0 depending on how long the signal was held high. If the time on high is 0.4 +/- 0.15 microseconds, \nthe bit is consider a 0. If the time on high is 0.8 +/- 0.15 microseconds. The bit is considered a 1. </p>\n\n<p>A timeline of a bit would seen like this:</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/1594240/14508664/9bd1f964-0196-11e6-90c3-e7f4f9be524e.png\" alt=\"alt tag\" /></p>\n\n<p>For a single pixel, 24 bits must be sent, which means, a pixel takes 30 microseconds to write (If transmitting at exactly 1.25 microseconds).\nFor the whole 144 pixels, we need to transmit 3456 bits taking 4.32 ms (~230 Hz).</p>\n\n<p>In order to change the value of a pixel it is necessary to do a reset. This is done by keeping the DATA<em>IN on low for 50 microseconds or more.\nHowever, reset will not turn off the pixel, it will just release the register to be overwritten by the next 24 bits coming from the DATA</em>IN port.</p>\n\n<p><strong>Once a pixel is written, it will retain its value until it is overwritten. If we want to turn off the led, it is \nnecessary to send 24 0's to that pixel after a reset</strong></p>"}]}